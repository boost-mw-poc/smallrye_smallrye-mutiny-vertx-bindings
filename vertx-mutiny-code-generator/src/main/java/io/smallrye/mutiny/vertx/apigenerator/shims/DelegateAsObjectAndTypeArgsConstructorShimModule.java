package io.smallrye.mutiny.vertx.apigenerator.shims;

import java.util.ArrayList;
import java.util.List;

import javax.lang.model.element.Modifier;

import com.github.javaparser.StaticJavaParser;
import com.github.javaparser.ast.type.TypeParameter;
import com.palantir.javapoet.MethodSpec;
import com.palantir.javapoet.TypeName;
import com.palantir.javapoet.TypeSpec;

import io.smallrye.mutiny.vertx.TypeArg;
import io.smallrye.mutiny.vertx.apigenerator.analysis.BaseShimConstructor;
import io.smallrye.mutiny.vertx.apigenerator.analysis.Shim;
import io.smallrye.mutiny.vertx.apigenerator.analysis.ShimClass;
import io.smallrye.mutiny.vertx.apigenerator.analysis.ShimMethodParameter;
import io.smallrye.mutiny.vertx.apigenerator.analysis.ShimModule;
import io.smallrye.mutiny.vertx.apigenerator.collection.VertxGenInterface;
import io.smallrye.mutiny.vertx.apigenerator.types.JavaType;

/**
 * Declares the constructor taking the `delegate` (as Object) as parameter as well a type args if the class has type parameters.
 */
public class DelegateAsObjectAndTypeArgsConstructorShimModule implements ShimModule {
    @Override
    public boolean accept(ShimClass shim) {
        return shim.getSource().isConcrete();
    }

    @Override
    public void analyze(ShimClass shim) {
        // Need to determine the method parameters
        List<ShimMethodParameter> parameters = new ArrayList<>();
        parameters.add(new ShimMethodParameter("delegate",
                StaticJavaParser.parseClassOrInterfaceType(Object.class.getName()), null, false));
        int index = 0;
        for (TypeParameter tv : shim.getSource().getTypeParameters()) {
            parameters.add(new ShimMethodParameter("typeArg_" + index,
                    StaticJavaParser.parseClassOrInterfaceType(TypeArg.class.getName())
                            .setTypeArguments(StaticJavaParser.parseTypeParameter(tv.getNameAsString())),
                    null, false));
            index++;
        }
        shim.addConstructor(new DelegateAndTypeArgsConstructor(this, shim.getSource(), parameters));
    }

    private static class DelegateAndTypeArgsConstructor extends BaseShimConstructor {
        private final VertxGenInterface source;

        public DelegateAndTypeArgsConstructor(DelegateAsObjectAndTypeArgsConstructorShimModule module,
                VertxGenInterface source,
                List<ShimMethodParameter> parameters) {
            super(module, parameters);
            this.source = source;
        }

        @Override
        public void generate(ShimClass shim, TypeSpec.Builder builder) {
            MethodSpec.Builder cst = MethodSpec.constructorBuilder();
            cst.addModifiers(Modifier.PUBLIC);
            for (ShimMethodParameter parameter : getParameters()) {
                var cn = Shim.getTypeNameFromType(parameter.shimType());
                var name = parameter.name();
                cst.addParameter(cn, name);
            }
            TypeName originalTypeName = JavaType.of(shim.getSource().getFullyQualifiedName()).toTypeName();
            if (shim.getParentClass() != null) {
                cst.addStatement("super(($T) delegate)", originalTypeName);
            }
            cst.addComment("Generated by " + declaredBy().getClass().getName());
            cst.addStatement("this.delegate = ($T) delegate", originalTypeName);
            int index = 0;
            for (TypeParameter tv : source.getTypeParameters()) {
                cst.addComment("Type parameter " + index + " : " + tv.getNameAsString());
                cst.addStatement("this.__typeArg_" + index + " = typeArg_" + index);
                index++;
            }
            builder.addMethod(cst.build());
        }

    }
}
