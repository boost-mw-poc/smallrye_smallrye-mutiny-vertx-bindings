package io.smallrye.mutiny.vertx.apigenerator.shims;

import java.util.List;

import javax.lang.model.element.Modifier;

import com.github.javaparser.ast.type.TypeParameter;
import com.palantir.javapoet.ClassName;
import com.palantir.javapoet.MethodSpec;
import com.palantir.javapoet.TypeSpec;

import io.smallrye.mutiny.vertx.apigenerator.analysis.BaseShimConstructor;
import io.smallrye.mutiny.vertx.apigenerator.analysis.Shim;
import io.smallrye.mutiny.vertx.apigenerator.analysis.ShimClass;
import io.smallrye.mutiny.vertx.apigenerator.analysis.ShimMethodParameter;
import io.smallrye.mutiny.vertx.apigenerator.analysis.ShimModule;
import io.smallrye.mutiny.vertx.apigenerator.collection.VertxGenInterface;

/**
 * Declares the constructor taking the `delegate` as parameter.
 */
public class DelegateConstructorShim implements ShimModule {
    @Override
    public boolean accept(ShimClass shim) {
        return shim.getSource().isConcrete();
    }

    @Override
    public void analyze(ShimClass shim) {
        shim.addConstructor(new DelegateConstructor(this, shim.getSource()));
    }

    /**
     * The constructor taking the delegate as parameter.
     *
     * <pre>
     * public shim(T delegate) {
     *     // if has parent
     *     super(delegate);
     *
     *     this.delegate = delegate;
     *
     *     // for each shimType parameter
     *     this.__typeArg_0 = io.smallrye.mutiny.vertx.TypeArg.unknown();
     * }
     * </pre>
     */
    private static class DelegateConstructor extends BaseShimConstructor {
        private final VertxGenInterface source;

        public DelegateConstructor(DelegateConstructorShim module, VertxGenInterface source) {
            super(module, List.of(new ShimMethodParameter("delegate", source.getType(), null, false)));
            this.source = source;
        }

        @Override
        public void generate(ShimClass shim, TypeSpec.Builder builder) {
            MethodSpec.Builder cst = MethodSpec.constructorBuilder();
            cst.addJavadoc("""
                    Create a new instance of {@link $T} delegating to the given (non-null) instance of {@link $T}.
                    """,
                    ClassName.bestGuess(shim.getFullyQualifiedName()),
                    ClassName.bestGuess(shim.getSource().getFullyQualifiedName()));
            cst.addModifiers(Modifier.PUBLIC);
            for (ShimMethodParameter parameter : getParameters()) {
                var cn = Shim.getTypeNameFromType(parameter.shimType());
                var name = parameter.name();
                cst.addParameter(cn, name);
            }
            if (shim.getParentClass() != null) {
                cst.addStatement("super(delegate)");
            }
            cst.addComment("Generated by " + declaredBy().getClass().getName());
            cst.addStatement("this.delegate = delegate");
            int index = 0;
            for (TypeParameter tv : source.getTypeParameters()) {
                cst.addComment("Type parameter " + index + " : " + tv.getNameAsString());
                cst.addStatement("this.__typeArg_" + index + " = io.smallrye.mutiny.vertx.TypeArg.unknown()");
                index++;
            }
            builder.addMethod(cst.build());
        }

    }
}
